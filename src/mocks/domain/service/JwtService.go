// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_domain_service

import (
	entity "github.com/Mrityunjoy99/sample-go/src/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// JwtService is an autogenerated mock type for the JwtService type
type JwtService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userId
func (_m *JwtService) GenerateToken(userId string) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token
func (_m *JwtService) ValidateToken(token string) (*entity.JwtToken, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *entity.JwtToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.JwtToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.JwtToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.JwtToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJwtService creates a new instance of JwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtService {
	mock := &JwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
